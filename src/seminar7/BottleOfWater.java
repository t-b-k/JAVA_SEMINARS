package seminar7;
// наследование
// C помощью наследования можно расширить функционал уже имеющегося класса,
// за счет добавления новых методов и модификации старых
public class BottleOfWater extends Product {
    // добавим к нашему продукту новое состояние - например, ОБЪЕМ:
    private int volume;
    // любой конструктор, описываемый в классе-наследнике обязан вызывать конструктор
    // на уровне базового типа.
    // Если в базовом классе отсутствует конструктор без параметров,
    // то и в классе-наследнике он не создастся

    public BottleOfWater (String name, double price, int volume) {
        super(name, price);
        this.volume = volume;
    }

    @Override
    String displayInfo() {
        // Данная конструкция-заглушка говорит о том, что в классе, от которого наследуется данный,
        // уже есть метод с названием displayInfo, и по умолчанию будет вызываться он.
        // return super.displayInfo();
        // Но мы хотим переопределить этот метод, чтобы он возвращал информацию не только о бренде и цене,
        // но также и об объеме нашего товара

        return String.format("%s - %s - %f - объем: %d", brand, name, price, volume);
    }
}
